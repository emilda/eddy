## Version
app.version = v2.1
monash.term.conditions = http://www.monash.edu/eresearch/about/ands-merc.html
## Start of Page Titles
home.action.title = Home
search.home.action.title = Search
aboutus.action.title = About Us

user.ldap.register.action.title = Monash User Registration
user.register.action.title= User Self-Registration
user.register.option.title = User Registration
user.login.action.title = User Login
user.profile.action.title = User Profile
user.profile.image.action.title= Profile Image
user.display.home.action.title = User Home
user.events.action.title = User Events
stage.transfer.title = Staging Transfer

ands.md.registration.title = Public Registration
user.reset.passwd.action.title = Reset User Password
user.change.password.action.title = Change User Password
user.all.users.title = Users

admin.manage.user = Manage User
admin.view.user.details = User Details
admin.list.all.users.action.title = View All Users
admin.activate.user.account.action.title = Activate User Account
admin.reject.user.account.action.title = Reject User Account

user.data.change.collection.permissions.action.title = Collection Permissions
view.all.permission.requests.action.title = Permission Requests

## End of Page Titles

#### Input Field Names
user.firstName = First Name
user.lastName = Last Name 
user.displayName= User Name
user.password = Password
user.new.password = New Password
user.new.rePassword = New Password Again
user.current.password = Current Password
user.email = E-mail
user.uniqueId = User ID
user.organization = Organization
security.code = Word Verification
user.authcateId = Monash Authcate ID
login.button = Login
registration.button = Register
reset.button = Reset
reset.password.button = Submit
submit.button=Submit
activate.button=Activate
reject.button=Reject

collection.name = Collection Name
collection.date = Created Date
collection.desc = Description
collection.temporal.from = Temporal Coverage From
collection.temporal.to = Temporal Coverage To
collection.private.field= Private Collection
collection.spatial.coverage = Spatial Coverage

data.create.button = Create
data.edit.button = Update
net.cdf.file=Net-CDF File
net.cdf.file.import.button = Import
## END of Input Field Name;

##input fields hints section
user.reg.firstName.hint = Maximum 10 characters(a-zA-Z) in length
user.reg.lastName.hint = Maximum 10 characters(a-zA-Z) in length
user.reg.email.hint = e.g. yourname@example.com
user.reg.password.hint = At least one letter and one number; minimum 6 and maximum 10 characters in length
user.new.password.hint = At least one letter and one number; minimum 6 and maximum 10 characters in length
user.new.rePassword.hint = Re-enter your password again
user.current.password.hint = Please enter your current password
user.reg.organization.hint = The organization you belong to
security.code.hint = Type the characters you see in the picture below
user.ldap.reg.authcateId.hint =Your Monash Authcate ID
user.ldap.reg.authcate.password.hint = Your Monash Authcate password
user.login.uniqueId.hint = Your Monash Authcate ID or E-mail address
user.login.password.hint = Your password

# end of input fields hints section

## User Registration Section ###
# normail user - self-registed user
user.reg.choose.options.msg = Please choose one of the following registration options:

user.reg.firstName.required = User first name required
user.reg.firstName.spec = User first name must be maximum 10 characters(a-zA-Z) in length
user.reg.firstName.range =User first name must be maximum ${maxLength} characters in length 

user.reg.lastName.required = User last name required
user.reg.lastName.spec = User last name must be maximum 10 characters(a-zA-Z) in length
user.reg.lastName.range =User last name must be maximum ${maxLength} characters in length 

user.reg.password.required = User password required
user.reg.password.spec = Password must contain at least one letter and one number; minimum 6 and maximum 10 characters in length
user.reg.password.range = Password must be minimum ${minLength} and maximum ${maxLength} characters in length

user.reg.organization.required = The organization required

user.reg.email.required = User E-mail required
user.reg.email.spec = A valid E-mail address
user.reg.email.regex.invalid = Invalid E-mail address
user.reg.email.already.registed = The user E-mail is already registered
user.reg.display.name.already.registed = The user name is already registered
user.reg.check.failed = Failed to check the user registration

# ldap user registration
user.reg.ldap.authcate.id.required = Monash Authcate ID required
user.reg.ldap.authcate.password.required = Monash Authcate password required
user.reg.ldap.authcate.id.already.registed = The Monash Authcate ID is already registered
user.reg.ldap.authcate.email.already.registed = The user E-mail is already registered
user.reg.ldap.invalid.authcateId.or.password = Invalid Monash Authcate ID or password
user.req.ldap.check.user.account.ldap.failed = Failed to check user ldap info
user.reg.ldap.check.user.account.db.failed = Failed to check user registration info


security.code.required = Word verification required
security.code.invalid = Invalid word verification code
user.register.finished.msg =<center><b>Dear {0}. Thank you for the registration</b><br><br>Your account is not activated yet. Administrator will activate your account and send a notification email to you shortly.</center>

user.registration.failed= User registration failed.

### END of User Registration

#####Start of User Reset Password Section
user.reset.password.firstName.required = User first name required
user.reset.password.lastName.required = User last name required
user.reset.password.email.required = User E-mail required
user.reset.password.email.regex.invalid = Invalid E-mail address

user.reset.password.required = User password required
user.reset.password.spec = Password must contain one letter and one number; minimum 6 and maximum 10 characters in length
user.reset.password.range = Password must be minimum ${minLength} and maximum ${maxLength} characters in length

user.reset.rePassword.required = Please enter password again
user.reset.rePassword.spec = Re-entered password must contain one letter and one number; minimum 6 and maximum 10 characters in length
user.reset.rePassword.range = Re-entered password must be minimum ${minLength} and maximum ${maxLength} characters in length
user.reset.two.passwords.not.same = The entered two passwords are not same
user.reset.password.successfully.msg= <center><b>Dear {0} </b><br><br> Your new password has been reset successfully</center>
user.new.password.required = User new password required 
user.current.password.required = User current password required

#UserResetPasswordAction error messages
user.reset.password.error = Reset User Password Error
resetpwdact.invalid.confirmation.link = Invalid confirmation link of request for reset password
resetpwdact.expired.confirmation.link = The reset password confirmation link has been expired
resetpwdact.validate.reset.password.confirmation.failed =Validate the reset password confirmation failed
resetpwdact.reset.password.failed = User reset password failed
####End of User Reset Password Section

## change password
user.change.ldap.password.not.allowed = We can''t change the password for Monash Authcate account, please contact ITS support service
user.show.change.password.failed = Failed to show the change password page
user.change.password.two.passwords.not.same = The entered two passwords are not same 
user.change.password.success.msg = <center><b>Dear {0} </b><br><br> Your new password has been changed successfully</center>
user.change.password.failed = Failed to change user password
user.change.password.incorrect.current.password= Incorrect current password

#make a request for reset password in forgotPassword method of UserAction
useract.forgotpassword.name.or.email.invalid = Invalid user name or E-mail address, please re-enter your details
useract.forgotpassword.inactive.account = Your account is inactive, you can''t reset your password, please contact the system administrator
useract.forgotpassword.cannot.reset.ldap.account = We can''t reset the password for Monash Authcate account, please contact ITS support service
useract.forgotpassword.request.reset.password.failed = Request for reset password failed
## confirmation email title
useract.forgotpassword.email.title = Confirm Request And Reset Password
useract.forgotpassword.request.finished.msg = <center><b>Dear {0} </b><br><br>You have completed the request for resetting your password. An E-mail will arrive shortly with instructions about how to reset your new password.</center>
### End of make a request for reset user password

#Start of User Login Section
user.login.uniqueId.required = Monash Authcate ID or E-mail address required
user.login.password.required = User password required
user.login.invalid.authcateId.password = Invalid Authcate ID or password
user.login.try.times = You can try {0} times
user.login.try.too.manay.times=You have tried too many times, please login after {0} minutes
user.login.account.inactive.error = Your account is inactive, please contact the system administrator
user.login.failed = User login failed
#End of User Login Section

#====================== Admin activate user account ================================
user.register.account.activation.mail.title = User Account Activation Request
admin.activate.account.link.invalid = Invalid activation link of user registration 
admin.activate.account.link.expired = The activation link of user registration has been expired
admin.validate.activation.link.failed = Failed to validate the activation link of user registration
admin.activate.account.failed = Failed to activate the user account
admin.activate.account.permission.denied = Failed to activate the user account, permission denied
admin.manage.user.account.permission.denied= Failed to manage user account, permission denied
admin.manage.user.account.action.type.must.be.specified = You must specify an managing user action type
admin.manage.user.account.failed = Faild to manage the user account
admin.manage.user.success = {0} successfully
user.account.activation.notification.mail.title = User Account Activation Notification
user.account.reject.notification.mail.title = User Account Reject Notification
admin.activate.account.success.msg = <center><b>The user account has been activated successfully.</b><br><br>A notification E-mail will send to {0} directly</center> 
admin.reject.account.success.msg = <center><b>The user registration has been rejected successfully.</b><br><br>A notification E-mail will send to {0} directly</center> 
admin.get.user.details.error = Failed to get the user details
admin.get.user.not.found = Failed to get the user details, the user doesn''t exist
list.all.users.failed = Failed to get all users

#============== navigation label =====================================================
mycollection.nav.label.name = My Collections
pubcollection.nav.label.name = Collections
allcollection.nav.label.name = All Collections
create.new.collection = New Collection
update.collection = Update Collection
delete.collection = Delete Collection
list.all.collections = List Collections
view.collection.detail = View Collection Details
view.collection.error = View Collection Error
list.all.collections.error = List Collections Error
show.collection.update.page.error = Show Collection Update Page Error
update.collection.error = Update Error
change.collection.permission.nav.label.name = Change Permissions
change.collection.permission.error = Change Permission Error
apply.collection.permission.nav.label.name = Apply For Permissions
delete.collection.error = Delete Collection Error
import.dataset.error = Import Dataset Error
export.dataset.error = Export Dataset Error

#========================= common messages =============================================
check.permissions.error = Failed to check the permissions 
empty.collections.msg = You don''t have any data collections in this repository
no.permissions.to.view.collection = You don''t have any permissions to view this collection
view.type.must.be.provided = View Type must be provided

#============================ collection permission =====================================
collection.change.permissions.denied = Failed to change collection permissions, permission denied
failed.to.change.nonexisted.collection.permissions = Failed to change collection permissions, the collection doesn''t exist
failed.to.change.collection.permissions = Failed to change the collection permissions
change.collection.permission.success = Collection permissions have been changed successfully
collection.owner.does.not.need.apply.perms = The owner of the collection doesn''t need to apply for the access permissions
failed.to.show.apply.collection.perms.page = Failed to show the applying for collection permission page
failed.to.apply.collection.permissions = Failed to apply for the collection permissions
at.least.selected.permission.required = At least one permission required
failed.to.get.user.permission.requests = Failed to get the permission requests
failed.to.grant.user.requested.permissions = Failed to grant the user requested permissions
failed.to.reject.user.requested.permissions = Failed to reject the user requested permissions
apply.for.collection.permissions.successfully = You have applied the {0} collection permissions successfully 
grant.user.requested.permissions.successfully = User requested permissions have been granted on the {0} collection successfully
reject.user.requested.permissions.successfully = User requested permissions have been rejected on the {0} collection successfully

#================= datastore path =======================================================
datastore.path.undefined.error = Data store path must be pre-defined in the system
datastore.path.permission.error = No write permission for data store path
datastore.path.check.permission.failed = Failed to check the data store path permissions

#================= collection creating or updating ======================================
collection.name.required = Collection name required
collection.description.required = Collection description required
collection.name.range = Name must be maximum ${maxLength} characters in length
collection.name.max.length = Name must be maximum 80 characters in length
collection.desc.range = Description must be maximum ${maxLength} characters in length
collection.desc.max.length = Description must be maximum 4000 characters in length
collection.name.hint = Collection name, maximum 80 characters in length
collection.start.date.hint = The start date for a temporal coverage period of the collection
collection.end.date.hint = The end date for a temporal coverage period of the collection
collection.desc.hint = Collection description, maximum 4000 characters in length
collection.coverage.max.length = Spatial coverage must be maximum 255 characters in length
collection.spatial.coverage.hint = The spatial coverage of the collection, please use google map to setup the spatial coverage

invalid.collection.id = Invalid collection id
invalid.collection.owner.id = Invalid collection owner id
collection.name.already.existed = The collection name already existed
create.collection.success = The new collection has been created successfully
failed.to.create.collection = Failed to create a collection
failed.to.show.create.collection.page =Failed to show a collection creation page 
show.collection.updating = Collection Updating 
collection.start.date.must.be.earlier.than.to.datetime = The start date must be earlier than the end date
collection.fromDate.and.toDate.must.be.provided = The start date and the end date must be provided

#================= update collection ==============================================================
show.collection.update.page.permission.denied = Failed to show the collection updating page, permission denied
show.collection.update.page.failed.collection.not.exist = Failed to show the collection updating page, the collection doesn''t exist
show.collection.update.page.failed = Failed to show the collection updating page
collection.update.permission.denied = Failed to update the collection, permission denied
collection.update.failed.collection.not.exist = Failed to update the collection, the collection doesn't exist
collection.update.failed = Failed to update the collection
update.collection.success = The collection has been updated successfully

#========================== list collections =============================================
failed.to.list.all.collections = Failed to list all collections
list.all.collections.failed.permission.denied = Failed to list all collections, permission denied

#=========================== view collection =============================================
failed.to.get.collection.not.exist = Failed to get the collection, the collection doesn''t exist
failed.to.get.collection.details = Failed to get collection details
failed.to.get.collection.permission.denied = Permission denied. This work is available on request to the researcher
#=========================== delete collection =============================================
delete.collection.permission.denied = Failed to delete the collection, the permission denied
failed.to.delete.nonexisted.collection = Failed to delete the collection, the collection doesn't exist
failed.to.delete.collection = Failed to delete the collection
delete.collection.success = The {0} collection has been deleted successfully

#================== import dataset file ========================================================
dataset.import.permission.denied = Failed to import dataset, permission denied
dataset.import.get.collection.details.failed = Failed to import dataset, can''t get the collection details 
dataset.import.file.must.be.provided = Failed to import dataset, the dataset file must be provided
dataset.import.file.already.existed = Failed to impot dataset, the dataset file already existed
dataset.import.check.file.name.error = Failed to import dataset, checking file name error
dataset.import.failed = Failed to import the dataset file
dataset.import.success = The {0} dataset file has been imported successfully

#================== export dataset file ========================================================
dataset.export.collection.not.exist = Failed to export dataset, the collection doesn''t exist
dataset.export.permission.denied = Failed to export dataset file, permission denied
dataset.export.failed = Failed to export the dataset file
dataset.export.failed.nonexisted.dataset.file = Failed to export the dataset, the dataset file doesn''t exist
dataset.export.failed.check.dataset.error = Failed to export the dataset, check the dataset error
dataset.export.get.collection.details.failed = Failed to export dataset, can''t get the collection details

#================= delete dataset file =========================================================
dataset.delete.failed.nonexisted.dataset.file = Failed to delete the dataseet, the dataset file doesn''t exist
dataset.delete.get.collection.details.failed = Faileld to delete the dataset, can''t get the collection details
dataset.delete.failed.can.not.get.dataset.file = Failed to delete the dataset, can''t get the dataset file
dataset.delete.permission.denied = Failed to delete dataset file, permission denied
failed.to.delete.dataset = Failed to delete the dataset
delete.dataset.success = The {0} dataset file has been deleted successfully

#================= view dataset data ===========================================================
view.dataset.data.failed.dataset.not.exist = Failed to view the dataset data, the dataset file doesn''t exist
view.dataset.data.failed = Failed to view the dataset data
view.dataset.data.permission.denied = Failed to view the dataset data, permission denied

view.pub.dataset.data.permission.denied = Failed to view the public dataset data, permission denied
view.pub.dataset.data.failed.dataset.not.exist = Failed to view the pub dataset data, the dataset file doesn''t exist
view.pub.dataset.data.get.collection.details.failed = Failed to view the pub dataset data, can''t get the collection details
view.pub.dataset.collection.not.exist = Failed to view the public dataset data, the collection doesn''t exist
view.pub.dataset.data.failed = Failed to view the public dataset data
view.user.home.failed = Failed to view user home
list.user.events.failed = Failed to get user events
delete.user.event.failed = Failed to delete user event
user.event.deleted.success = The user event has been deleted successfully
profile.image.size.too.small= The profile image size is too small
profile.image.file.upload.failed = Failed to upload the profile image file
profile.image.file.must.be.provided = The profile image file must be provided
profile.image.format.not.supported = Unsupported image file format
profile.image.file.saving.failed = Failed to save the profile image
show.profile.image.upload.page.error = Failed to show profile image uploading page
get.user.profile.failed = Failed to get the user profile
failed.to.update.user.profile = Failed to update the user profile
profile.contact.details.length.too.long = The contact details must be maximum 1000 characters in length
profile.user.interests.length.too.long = The user interests must be maximum 1000 characters in length

#================== stage transfer =====================================================
stage.transfer.working.in.progress = A stage transferring is still processing, please waiting until it is finished
stage.transfer.start.message = The stage transferring has been started successfully
stage.transfer.start.with.email.message = The stage transferring has been started successfully. <br>The system will send an email of transferring results to you after the stage transferring  is completed
stage.transfer.failed.to.start.stage.transfer = Failed to start the stage transferring
stage.transfer.list.stage.files.failed = Failed to list all stage files
stage.transfer.files.required = At lease one stage file must be selected
stage.transfer.check.permissions.error = Failed to check the permission of the stage transfer
stage.transfer.permission.denied = Stage transfer permission denied

#================== register metadata with ands ===============================================
ands.md.registration.get.user.failed = Failed to get the user information
ands.md.registration.none.ldap.user.not.supported=  The metadata registration for a Non-LDAP user is not supported
ands.md.registration.permission.denied = Failed to register the metadata of the collection, the permission denied
ands.md.registration.get.collection.failed = Failed to get the collection details 
ands.md.registration.check.existed.parties.failed = Failed to check the researchers associated with this collection from database
ands.md.registration.check.existed.activities.failed = Failed to check the grants(projects) associated with this collection from database
ands.md.registration.check.license.failed = Failed to check the collection license from database
ands.md.registration.check.access.rights.failed = Failed to check the collection access rights

ands.md.registration.party.required = At least one researcher required
ands.md.registration.license.required = The collection license required
ands.md.registration.search.party.cnoremail.must.be.provided = A researcher name or email must be provided
ands.md.registration.search.party.failed = Failed to search a researcher
ands.md.registration.search.party.not.found = Researcher not found
ands.md.registration.ws.failed = Failed to call the research master web service
ands.md.registration.add.party.one.party.must.be.selected = A researcher must be selected
ands.md.registration.add.party.only.one.party.needed = Please select one of the following researcher(s)
ands.md.registration.edit.party.not.existed = Researcher not found, unable to update a researcher
ands.md.registration.edit.party.get.party.failed = Failed to find a researcher, unable to update a researcher
ands.md.registration.edit.party.key.must.be.provided = The researcher party key must be provided
ands.md.registration.edit.party.failed = Failed to update the researcher information

ands.md.registration.create.handle.failed = Failed to create a handle for this collection. Unable to register the collection
ands.md.registration.create.unique.key.failed = Failed to create a unique key for this collection. Unable to register the collection
ands.md.registration.register.failed = Failed to register the metadata
ands.md.registration.register.success = The metadata is ready for harvesting
ands.md.registration.audit.info = The metadata of the {0} has been registered successfully

#add party
ands.add.party.party.key.range = The researcher key must be maximum ${maxLength} characters in length if provided
ands.add.party.party.key.hint = Optional, maximum 100 characters in length if provided

ands.add.party.party.title.required = The researcher title required
ands.add.party.party.title.range = The researcher title must be maximum ${maxLength} characters in length
ands.add.party.party.title.hint = Maximum 20 characters in length

ands.add.party.party.first.name.required = The researcher first name required
ands.add.party.party.first.name.range = The researcher first name must be maximum ${maxLength} characters in length
ands.add.party.party.first.name.hint = Maximum 20 characters in length

ands.add.party.party.last.name.required = The researcher last name required
ands.add.party.party.last.name.range = The researcher last name must be maximum ${maxLength} characters in length
ands.add.party.party.last.name.hint = Maximum 20 characters in length

ands.add.party.party.email.required= The researcher email required
ands.add.party.party.email.regex.invalid = Invalid researcher email
ands.add.party.party.email.hint = A valid email required, e.g. youremail@example.com

ands.add.party.party.address.required = The address required
ands.add.party.party.address.range = The researcher address must be maximum ${maxLength} characters in length
ands.add.party.party.address.hint = Maximum 255 characters in length, a physical address

ands.add.party.party.url.required= The researcher web url required
ands.add.party.party.url.regex.invalid = Invalid researcher url
ands.add.party.party.url.hint = A valid web URL is required in the following format http://www.sample.com/profile

ands.add.party.party.group.name.required = The researcher group name required
ands.add.party.party.group.name.range = The researcher group name must be maximum ${maxLength} characters in length
ands.add.party.party.group.name.hint = Maximum 100 characters in length, e.g. Monash University

ands.add.party.party.group.url.required= The group web site url required
ands.add.party.party.group.url.regex.invalid = Invalid group web site url
ands.add.party.party.group.url.hint =  A valid web URL is required in the following format http://www.sample.com
ands.md.registration.add.party.failed = failed to add a researcher
ands.md.registration.add.party.already.existed = The researcher already existed

#====================Access Rights and License ===================================================
collection.access.type.public = This work is publicly available
collection.access.type.private = This work is available on request to {0}  at {1}
license.type.must.be.provided = Please selete a license you want to apply to this collection 
license.show.selected.type.failed = Failed to show the selected license type
license.show.options.failed = Failed to show the license options
license.failed.to.get.cccl.license= Failed to call web service to get the creative commons license
license.type.invalid= Invalid license type
license.failed.to.show.ccpd.license = Failed to show the creative commons CC0 waiver license
license.user.must.confirm.cco.waiver= You must read and accept the conditions
license.next.button = Next 
license.save.button = Save

## search 
failed.to.show.search.page = Failed to show the search page
at.least.one.search.condition.required = At least one search condition is required
search.collection.or.dataset.failed = Failed to search the collections or datasets
search.started.datetime.must.be.not.greater.than.end.datetime = Invalid created date time ranges, The started date must be earlier than the ended date
